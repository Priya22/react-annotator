{"version":3,"sources":["ErrorBoundary.js","annotate.jsx","analyze.jsx","route.jsx","index.jsx"],"names":["ErrorBoundary","props","state","hasError","this","children","error","Component","Tool","className","React","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","name2id","charList","nameToMain","forEach","value","index","name","id","expand","alias","id2name","el","TextLoader","cur_file","content","data","handleUpload","bind","reloadState","event","window","confirm","setState","file_reader","FileReader","self","file_name","target","files","console","log","axios","get","params","then","res","title","onloadend","result","file_ext","readAsText","LoadButton","style","TextHeading","fileName","type","accept","onChange","multiple","ContentBox","myData","current_sel","sel_type","locked","confirmed","cur_info","selectedRows","selectedSpanIds","cur_mode","cur_ref_exp","men_ranges","men_infos","men_span_ids","quote_ranges","quote_infos","quote_span_ids","clearSel","addToRanges","setSelection","processSelection","updateChars","infoSubmit","onSpanClick","confirmSelection","setField","updateSelectedRows","updateMode","setSelectionType","handleSelChange","saveCurrent","checkCompatible","checkArrayEqual","mergeChars","getSpanInfo","getNumAnnotations","getCharDicts","qinfos","minfos","cn2qids","cn2mids","key","speaker","s","push","speakee","Object","entries","a","b","length","sort","i","selectedIds","spanId","infos","new_info","span_id","exceprt","ranges","substring","start","end","includes","filter","x","tempAlert","text","spanid","cur_sub","last_info","quote_type","texts","classes","ids","span_ids","span_ends","keys","map","last_end","Math","max","apply","last","min","current","cur_span_index","cur_span_id","cur_class","String","alert","preventDefault","target_class","cur_ranges","cur_infos","susbtr","new_span_id","info","ref_exp","random_id","cur_sel","currentSelectedSpans","currentSpanIDs","newRows","field","selectedROws","getSelection","empty","newCharList","mode","curChar","newChar","qcount","mcount","cinfos","c2q","c2m","qid","mid","JSON","parse","stringify","curCharList","mergeRows","insIndex","val","main_char","cur_char","updateInfos","j","splice","charID","count","new_chars","spanID","data_to_save","post","status","char2id","id2char","display_obj","save_dis","quote_class","mention_class","display","href","onClick","selected_text","clickEnabled","disabled","msg","duration","document","createElement","setAttribute","innerHTML","setTimeout","parentNode","removeChild","body","appendChild","Collect","lockSel","SelectionType","FormControl","m","RadioGroup","aria-label","row","fontSize","FormControlLabel","control","Radio","color","label","labelPlacement","TextArea","show","onMouseUp","convertToHtml","getToolSpan","handleHoverEnter","handleHoverLeave","getDetailedInfo","element","sel","doc","ownerDocument","win","defaultView","parentWindow","rangeCount","range","getRangeAt","preCaretRange","cloneRange","selectNodeContents","setEnd","startContainer","startOffset","toString","endContainer","endOffset","selection","textRange","createRange","preCaretTextRange","createTextRange","moveToElementText","setEndPoint","currentTarget","offSets","getSelectionCharacterOffsetWithin","left","clientX","top","clientY","displaySpanInfo","getElementById","removeModal","ref","join","onMouseEnter","onMouseLeave","spans","CharacterList","expandedRows","handleRowClick","renderItem","deleteIcon","handleDeleteIcon","checkBox","handleCheckBox","radioBox","handleRadioBox","addButton","handleAddChar","handleDeleteAlias","addAliasButton","handleAddAlias","mergeButton","handleMergeClick","handleMakeMainName","rowId","currentExpandedRows","newExpandedRows","concat","numAnnots","newChars","c","currentSelectedRows","isRowCurrentlySelected","Array","isArray","newSelectedRows","checked","old_chars","new_expand","al","item","aliasName","prompt","parent","new_c","old_name","oa","icon","itemRows","next_id","allItemRows","perItemRows","width","SubTable","makeMainNameIcon","deleteAliasIcon","CollectInfo","setQuoteType","onRefExpSubmit","onSubmit","onConfirm","onReviewEdit","ref_disable","message","selType","active","onBack","CollectMentionInfo","QuoteType","SpeakerInfo","onEdit","onDivClick","display_message","cursor","SpeakeeInfo","heading","SelectedText","RefExpInfo","SubmitInfoButton","DisplayInfo","ANN_NAMES","Analyze","name_1","name_2","handleNameChange","target_name","AnnNames","names","items","LoadFolderButton","directory","webkitdirectory","LoadFileButton","file_1","file_2","statusLists","indicator","handleSubmit","button_id","file","filename","reader","onload","e","n1","n2","charLists","DisplayCharStatus","colorMap","0","1","2","hidden","getAnnRows","toggleDisplay","cName","statusList","ann_names","ann_rows","ann_name","divClassName","buttonText","GenDis","saveAsFile","blob","Blob","url","URL","createObjectURL","download","click","split","App","to","exact","path","component","Home","ReactDOM","render"],"mappings":"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","file":"static/js/main.ce4427a9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n    static getDerivedStateFromError(error) {\n        return {\n            hasError: true\n        }\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h2>An Unfortuante Error has occured. Please refresh!</h2>\n        }\n        return this.props.children\n    }\n}\nexport default ErrorBoundary","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './grid.css';\n\n// import FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\n\n//import 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\n// import ReactModal from 'react-modal';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport axios from 'axios';\nimport ErrorBoundary from \"./ErrorBoundary\";\n// import ReactTooltip from \"react-tooltip\";\n\n//import myData from './quotes.json';\n//import testChars from './chars.json'\n\n//const title = JSON.parse('{{ title | tojson | safe}}');\n//console.log(title);\nclass Tool extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         file_loaded: true,\n    //\n    //     };\n    // }\n\n    render() {\n        return (\n            <div className=\"loader\">\n\n                <div className=\"row\">\n                    <div className=\"heading\">\n                        <h1>Quote Annotation Tool </h1>\n                    </div>\n                    <ErrorBoundary>\n                        <TextLoader />\n                    </ErrorBoundary>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction toTitleCase(str) {\n    return str.replace(\n      /\\w\\S*/g,\n      function(txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n      }\n    );\n  }\n\nfunction name2id(charList) {\n    //map alias name to character ID\n    let nameToMain = {}\n\n    charList.forEach((value, index) => {\n        //main name\n        nameToMain[value.name] = value.id;\n\n        value.expand.forEach((alias) => {\n            nameToMain[alias.name] = value.id;\n        })\n\n    });\n\n    return nameToMain;\n}\n\nfunction id2name(charList) {\n    let id2name = {};\n\n    charList.forEach((el) =>{\n        id2name[el.id] = el.name;\n    })\n\n    return id2name;\n}\n\nfunction getCharId(x, charList) {\n    let x2id = name2id(charList);\n  \n    if (!(x in x2id)){\n        return -1;\n    }\n    else {\n        return x2id[x];\n    }\n}\n\nfunction getCharName(id, charList) {\n    let id2n = id2name(charList);\n    \n    if (id in id2n) {\n        return id2n[id];\n    }\n    else {\n        return \"None\";\n    }\n}\n// function getAllNames(charList) {\n//     let names = []\n\n//     charList.forEach((value, index) => {\n//         //main name\n//         names.push(value.name);\n\n//         value.expand.forEach((alias) => {\n//             names.push(alias.name) \n//         })\n\n//     });\n\n//     return names;\n// }\n\nclass TextLoader extends React.Component {\n    // Checks if file is selected and loads it into the text box\n    constructor(props) {\n        super(props);\n        this.state = {\n            cur_file: '',\n            //file_ext: '',\n            content: '',\n            data: '',\n            charList: ''\n        };\n        this.handleUpload = this.handleUpload.bind(this);\n        this.reloadState = this.reloadState.bind(this);\n    }\n\n    reloadState(event) {\n        const confirm = window.confirm(\"Please save before you proceed!\");\n\n        if (confirm === true) {\n            this.setState({\n                cur_file: '',\n                content: '',\n                data: '',\n                charList: '',\n               \n            })\n        }\n    }\n\n    handleUpload(event) {\n        const file_reader = new FileReader();\n        let self = this;\n        const file_name = event.target.files[0].name;\n        console.log(event.target.files[0]);\n\n        //let json_req = {'file_name': file_name}\n        axios.get('http://127.0.0.1:8080/data',\n            {\n               params: {\n                   file_name: file_name,\n               }\n            }).then(res => {\n                //console.log(res.data);\n                this.setState({\n                    cur_file: res.data.title,\n                    content: res.data.content,\n                    data: res.data.data,\n                    charList: res.data.charList,\n\n                })\n        });\n        // this.setState({cur_file: file_name});\n        file_reader.onloadend = function () {\n            const content = file_reader.result;\n            //console.log(content);\n            self.setState({file_ext: '.txt', content: content});\n            //console.log(this.state);\n        };\n        file_reader.readAsText(event.target.files[0]);\n    }\n\n    render() {\n\n        if (this.state.cur_file === '') {\n            return (\n                <div className=\"content\">\n                    <LoadButton \n                    \n                    handleUpload={this.handleUpload}/>\n                    <p style={{'background':'white', 'text-align':'center', 'border':'none'}}><i><strong>Note: </strong>This is a friendly reminder to keep your character lists updated!\n                    <br /> Copy the </i> xx_chars.json <i>file over if you are starting the next part of a previously annotated text.</i></p>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div className=\"content\">\n                    <TextHeading value={this.state.cur_file}/>\n                    <ContentBox\n                        value={this.state.content}\n                        data={this.state.data}\n                        charList={this.state.charList}\n                        reloadState={this.reloadState}\n                        fileName={this.state.cur_file}\n                    />\n                </div>\n            )\n        }\n    }\n\n}\n\n\nfunction LoadButton(props) {\n    return (\n        <div id=\"load\" className=\"default\">\n            <h3 className={'init-heading'}> Load a text file: </h3>\n            <input type=\"file\" id=\"loadfiles\"\n                   accept=\".txt\"\n                   onChange={props.handleUpload}\n                   multiple/>\n        </div>\n    )\n}\n\nfunction TextHeading(props) {\n\n    return (\n        <div id=\"text-heading\">\n            <h1>{props.value}</h1>\n        </div>\n    )\n\n}\n\nfunction mapOrder (array, order, key) {\n\n    array.sort( function (a, b) {\n        var A = a[key], B = b[key];\n\n        if (order.indexOf(A) > order.indexOf(B)) {\n            return 1;\n        } else {\n            return -1;\n        }\n\n    });\n\n    return array;\n};\n\nclass ContentBox extends React.Component {\n\n    //The mitochondria of this application.\n\n    constructor(props) {\n        super(props);\n        //console.log(\"Constructor called\");\n        const myData = this.props.data;\n        const charList = this.props.charList;\n        const content = this.props.value;\n\n        this.state = {\n            content: content,\n\n            charList: charList,\n           \n            current_sel: '',\n            sel_type: 'quotes',\n            locked: false,\n            confirmed: false,\n          \n            cur_info: {},\n            selectedRows: [],\n            selectedSpanIds: [],\n            cur_mode: 'normal',\n            cur_ref_exp: '',\n\n            men_ranges: myData.men_ranges,\n            men_infos: myData.men_infos,\n            men_span_ids: myData.men_span_ids,\n\n            quote_ranges: myData.quote_ranges,\n            quote_infos: myData.quote_infos,\n            quote_span_ids: myData.quote_span_ids,\n\n        }\n        ;\n\n        this.clearSel = this.clearSel.bind(this);\n        this.addToRanges = this.addToRanges.bind(this);\n        this.setSelection = this.setSelection.bind(this);\n        this.processSelection = this.processSelection.bind(this);\n        this.updateChars = this.updateChars.bind(this);\n        this.infoSubmit = this.infoSubmit.bind(this);\n        this.onSpanClick = this.onSpanClick.bind(this);\n        this.confirmSelection = this.confirmSelection.bind(this);\n        this.setField = this.setField.bind(this);\n        this.updateSelectedRows = this.updateSelectedRows.bind(this);\n        this.updateMode = this.updateMode.bind(this);\n        this.setSelectionType = this.setSelectionType.bind(this);\n        this.handleSelChange = this.handleSelChange.bind(this);\n        this.saveCurrent = this.saveCurrent.bind(this);\n       // this.updateChars = this.updateChars.bind(this);\n        this.checkCompatible = this.checkCompatible.bind(this);\n        this.checkArrayEqual = this.checkArrayEqual.bind(this);\n        this.mergeChars = this.mergeChars.bind(this);\n        //this.simulateClick = this.simulateClick.bind(this);\n        this.getSpanInfo = this.getSpanInfo.bind(this);\n        //this.getCharValue = this.getCharValue.bind(this);\n        //this.id2name = this.id2name.bind(this);\n        this.getNumAnnotations = this.getNumAnnotations.bind(this);\n        this.getCharDicts = this.getCharDicts.bind(this);\n    }\n\n\n    getCharDicts(){\n        let qinfos = this.state.quote_infos;\n        let minfos = this.state.men_infos;\n\n        // console.log(qinfos);\n        // console.log(minfos);\n\n        let cn2qids = {};\n        let cn2mids = {};\n\n        for (const [key, value] of Object.entries(qinfos)) {\n            value.speaker.forEach((s) => {\n                if (s in cn2qids) {\n                    cn2qids[s].push(key)\n                }\n                else {\n                    cn2qids[s] = [key]\n                }\n            })\n\n            value.speakee.forEach((s) => {\n                if (s in cn2qids) {\n                    cn2qids[s].push(key)\n                }\n                else {\n                    cn2qids[s] = [key]\n                }\n            })\n        }\n\n        for (const [key, value] of Object.entries(minfos)) {\n            value.speakee.forEach((s) => {\n                if (s in cn2mids) {\n                    cn2mids[s].push(key)\n                }\n                else {\n                    cn2mids[s] = [key]\n                }\n            })\n        }\n\n        return {'quote': cn2qids, 'mention': cn2mids }\n\n    }\n\n    checkArrayEqual(a, b) {\n        if (a.length === 0 && b.length === 0){\n            return true;\n        }\n\n        else if (a.length !== b.length) {\n            return false;\n        }\n\n        else  {\n            a.sort();\n            b.sort();\n            for (var i = 0; i < a.length; i++) {\n                if (a[i] !== b[i]) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n    }\n\n    checkCompatible(selectedIds, spanId) {\n\n        const infos = (this.state.sel_type === 'quotes') ? this.state.quote_infos : this.state.men_infos;\n\n        if (selectedIds.length === 0) {\n            return true;\n        }\n\n        else {\n            const cur_info = infos[selectedIds[0]];\n            const new_info = infos[spanId];\n            console.log(\"Compatibility: \");\n            console.log(cur_info);\n            console.log(new_info);\n            // console.log(this.checkArrayEqual(cur_info['speakee'], new_info['speakee']));\n            // console.log(this.checkArrayEqual(cur_info['speaker'], new_info['speaker']));\n            // console.log(cur_info['quote_type'] === new_info['quote_type']);\n            // console.log(cur_info['ref_exp'] === new_info['ref_exp']);\n\n           if ((this.checkArrayEqual(cur_info['speakee'], new_info['speakee'])) &&\n                (this.checkArrayEqual(cur_info['speaker'], new_info['speaker'])) &&\n                (cur_info['quote_type'] === new_info['quote_type']) &&\n                (cur_info['ref_exp'] === new_info['ref_exp']))\n            {\n                return true;\n\n            }\n            else {\n                return false;\n            }\n        }\n\n        //cur_info = infos[selectedIds[0]]\n    }\n\n    onSpanClick(event) {\n        //this.saveCurrent(event);\n        const span_id = event.target.id;\n        const exceprt = this.state.content;\n        const ranges = (this.state.sel_type === 'quotes') ? this.state.quote_ranges : this.state.men_ranges;\n\n        console.log(\"Span clicked\");\n        console.log(span_id, typeof(span_id));\n        console.log(exceprt.substring(ranges[span_id].start, ranges[span_id].end));\n\n        let selectedIds = this.state.selectedSpanIds;\n        //const span_info = this.state.quote_infos[span_id];\n        //const span_range = this.state.ranges[span_id];\n        //console.log(selectedIds);\n        if (selectedIds.includes(span_id)) {\n            //console.log(\"Removing\");\n            selectedIds = selectedIds.filter((x) => x !== span_id);\n        }\n        else {\n            if (this.checkCompatible(selectedIds, span_id)) {\n                selectedIds.push(span_id);\n            }\n            //console.log(\"Pushing\");\n            //check if annotations are compatible\n            else {\n                tempAlert(\"Incompatible Selections!\", 3000);\n                return;\n            }\n        }\n        //console.log(selectedIds);\n        let text = '';\n\n        for (const spanid of selectedIds){\n            let cur_sub = exceprt.substring(ranges[spanid].start, ranges[spanid].end);\n            console.log(spanid, cur_sub);\n            text += cur_sub;\n            text += '; ';\n        }\n        let last_info = {};\n        let confirmed = this.state.confirmed;\n\n        if (selectedIds.length > 0) {\n            //last_info = infos[selectedIds[selectedIds.length - 1]];\n            last_info = this.getSpanInfo(selectedIds[selectedIds.length - 1]);\n            if (last_info.quote_type !== '') { //if it has already been annotated.\n                confirmed = true;\n            }\n        }\n        let locked = true;\n        //to skip steps\n        confirmed = true;\n        if (selectedIds.length === 0) {\n            locked = false;\n        }\n\n        this.setState({selectedSpanIds: selectedIds, current_sel: text, cur_info: last_info, confirmed: confirmed, locked: locked});\n\n    }\n\n    processSelection() {\n        console.log(\"Processing selections\");\n        let texts = [];\n        let classes = [];\n        let ids = [];\n\n        const ranges = (this.state.sel_type === 'quotes') ? this.state.quote_ranges : this.state.men_ranges;\n        const infos = (this.state.sel_type === 'quotes') ? this.state.quote_infos : this.state.men_infos;\n        const span_ids = (this.state.sel_type === 'quotes') ? this.state.quote_span_ids : this.state.men_span_ids;\n\n        const span_ends = Object.keys(ranges).map((key) => ranges[key].end);\n        //console.log(span_ends);\n        const text = this.state.content;\n\n        const last_end = Math.max.apply(null, span_ends);\n\n        const begin = 0;\n\n        const last = Math.min(text.length, last_end);\n        let current = begin;\n\n        let cur_span_index = 0;\n        //console.log(last);\n        while (current < last) {\n            const cur_span_id = span_ids[cur_span_index];\n            //console.log(cur_span_id, typeof(cur_span_id));\n            //console.log(ranges[cur_span_id]);\n            //console.log(current);\n            if (current < ranges[cur_span_id].start) {\n                //console.log(\"Normal range\");\n                let substr = text.substring(current, ranges[cur_span_id].start);\n\n                let cur_class = \"normal-text\";\n                texts.push(substr);\n                classes.push(cur_class);\n                ids.push('');\n                current = ranges[cur_span_id].start;\n            }\n\n            else if (current === ranges[cur_span_id].start) {\n                //console.log(\"Special range\");\n                let cur_class = '';\n                let substr = text.substring(ranges[cur_span_id].start, ranges[cur_span_id].end);\n\n                if (this.state.selectedSpanIds.includes(String(cur_span_id))) {\n                    this.state.confirmed ? cur_class = 'confirmed-quote' : cur_class = 'selected-quote';\n                }\n                else if (infos[cur_span_id].sel_type === 'Quote' && infos[cur_span_id].quote_type === \"\") {\n                    cur_class = 'identified-quote';\n                }\n                else {\n                    // cur_class = 'annotated-quote';\n                    if (infos[cur_span_id].sel_type === 'Mention') {\n                        cur_class = 'identified-quote';\n                        if (infos[cur_span_id].speakee.length > 0) {\n                            cur_class = 'annotated-quote';\n                        }\n                    }\n                    else {\n                        cur_class = infos[cur_span_id].quote_type.toLowerCase() + '-quote';\n                    }\n\n\n                }\n                //process mentions here\n                texts.push(substr);\n                classes.push(cur_class);\n                ids.push(cur_span_id);\n                current = ranges[cur_span_id].end;\n                cur_span_index += 1;\n\n            }\n        }\n\n\n        if (current < text.length) {\n            //subs = subs = '<span class = '+normal_class+'>' + text.substring(cur, text.length) + '</span>';\n            //cur_html+=subs;\n            texts.push(text.substring(current, text.length));\n            classes.push(\"normal-text\");\n            ids.push('');\n        }\n\n        return {\n            texts: texts,\n            classes: classes,\n            ids: ids\n        }\n    }\n\n    handleSelChange(event) {\n        console.log(event.target.id);\n        if (this.state.selectedSpanIds.length !== 0) {\n            alert(\"Please finish current annotation to switch tabs!\");\n            event.preventDefault();\n        }\n        else {\n            const target_class = event.target.id;\n            if (target_class === this.state.sel_type) {\n                event.preventDefault();\n            }\n            else {\n                //this.setState({quote_infos: , span_ids: , ranges: , sel_type: });\n                //alert(\"Changing tab to: \" + target_class);\n                this.setState({sel_type: target_class});\n                event.preventDefault();\n            }\n        }\n    }\n\n\n    addToRanges(start, end) {\n        console.log(\"Adding selection to ranges: \");\n        let cur_ranges = (this.state.sel_type === 'quotes') ? this.state.quote_ranges : this.state.men_ranges;\n        let cur_infos = (this.state.sel_type === 'quotes') ? this.state.quote_infos : this.state.men_infos;\n        let span_ids = (this.state.sel_type === 'quotes') ? this.state.quote_span_ids : this.state.men_span_ids;\n        const text = this.props.value;\n\n        const susbtr = text.substring(start, end);\n\n        const new_span_id = Math.max.apply(null, span_ids) + 1;\n        console.log(new_span_id);\n        cur_ranges[String(new_span_id)] = {\n                                        start: start,\n                                        end: end\n                                    };\n\n        const type = (this.state.sel_type === 'quotes') ? 'Quote' : 'Mention';\n        const info = {\n            speaker: [],\n            speakee: [],\n            ref_exp: '',\n            quote_type: '',\n            sel_type: type,\n            text: susbtr\n        };\n\n        cur_infos[String(new_span_id)] = info;\n        span_ids.push(String(new_span_id));\n        span_ids.sort(function (a, b) { return cur_ranges[a].start - cur_ranges[b].start });\n\n        if (this.state.sel_type === 'quotes') {\n            this.setState({quote_ranges: cur_ranges, quote_infos: cur_infos, cur_info: {}, quote_span_ids: span_ids,\n                locked:false, current_sel:'', confirmed: false, cur_mode:'normal'});\n        }\n        else {\n            this.setState({men_ranges: cur_ranges, men_infos: cur_infos, cur_info: {}, men_span_ids: span_ids,\n                locked:false, current_sel:'', confirmed: false, cur_mode:'normal'});\n        }\n\n    }\n\n    confirmSelection(event) {\n        if (this.state.confirmed === false) {\n            const random_id = this.state.selectedSpanIds[0];\n            const cur_info = (this.state.sel_type === 'quotes') ? this.state.quote_infos[random_id] : this.state.men_infos[random_id];\n            this.setState({confirmed: true, locked: true, cur_info: cur_info});\n        }\n        event.preventDefault();\n    }\n\n    // addToSelection(start, end) {\n    //\n    // }\n\n    setSelection(start, end) {\n        //console.log(selection, before, after);\n        const text = this.props.value;\n\n        const cur_sel = text.substring(start, end);\n        console.log(cur_sel);\n        if (this.state.cur_mode !== 'ref_exp') {\n\n            this.addToRanges(start, end);\n\n        }\n\n        else {\n            this.setState({cur_ref_exp: cur_sel});\n        }\n\n\n    }\n\n    clearSel(event) {\n        const currentSelectedSpans = this.state.selectedSpanIds;\n        let ranges = (this.state.sel_type === 'quotes') ? this.state.quote_ranges : this.state.men_ranges;\n        let infos = (this.state.sel_type === 'quotes') ? this.state.quote_infos : this.state.men_infos;\n        let span_ids = (this.state.sel_type === 'quotes') ? this.state.quote_span_ids : this.state.men_span_ids;\n\n        for (const spanid of currentSelectedSpans) {\n            delete ranges[spanid];\n            delete infos[spanid];\n        }\n        //console.log(span_ids[4]);\n        //console.log(currentSelectedSpans);\n        //console.log(currentSelectedSpans.includes(String(span_ids[4])));\n        span_ids = span_ids.filter((x) => {\n            return !currentSelectedSpans.includes(String(x))\n        });\n        console.log(\"Clearing filter: \");\n        //console.log(span_ids);\n        //console.log(span_ids[0]);\n        //console.log(ranges[span_ids[0]]);\n        if (this.state.sel_type === 'quotes') {\n            this.setState({quote_ranges: ranges, quote_infos: infos, quote_span_ids: span_ids, selectedSpanIds: [], current_sel: '', cur_info: {},\n                locked: false, cur_mode: 'normal'\n            });\n            event.preventDefault();\n        }\n        else {\n            this.setState({men_ranges: ranges, men_infos: infos, men_span_ids: span_ids, selectedSpanIds: [], current_sel: '', cur_info: {},\n                locked: false, cur_mode: 'normal'\n            });\n            event.preventDefault();\n        }\n\n\n    }\n\n\n    // updateCharList() {\n    //     //collect all annotated\n    //     console.log(\"Updating character list: \");\n    //     let qinfos = Object.values(this.state.quote_infos);\n    //     let minfos = Object.values(this.state.men_infos);\n    //     //console.log(typeof qinfos);\n    //     //list of speakers\n    //     let speakers = [];\n    //     qinfos.forEach((obj, index) => {\n    //         if ((obj.speaker.length !== 0) && !(speakers.includes(obj.speaker[0]))) {\n    //             speakers.push(obj.speaker[0]);\n    //         }\n    //         if (obj.speakee.length > 0) {\n    //             obj.speakee.forEach((name, ind) => {\n    //                 if (!speakers.includes(name)) {\n    //                     speakers.push(name);\n    //                 }\n    //             })\n    //         }\n    //     });\n\n    //     minfos.forEach((obj, index) => {\n    //         if (obj.speakee.length > 0) {\n    //             obj.speakee.forEach((name, ind) => {\n    //                 if (!speakers.includes(name)) {\n    //                     speakers.push(name);\n    //                 }\n    //             })\n    //         }\n    //     });\n\n    //     let order = speakers.reverse();\n    //     console.log(\"Recent speakers: \", order);\n    //     //rearrange to most recently used\n    //     let cur_charlist = this.state.charList;\n\n    //     //sort\n    //     let new_charList = mapOrder(cur_charlist, order, 'name').reverse();\n    //     return new_charList\n    //     //this.setState({charList: new_charList.reverse()});\n    // }\n\n    infoSubmit(event) {\n        //tempAlert(\"Info submitted!\", 3000);        //make brief popup\n        //this.addToRanges(this.state.cur_info);\n        const currentSpanIDs  = this.state.selectedSpanIds;\n        let infos = (this.state.sel_type === 'quotes') ? this.state.quote_infos : this.state.men_infos;\n\n        const info = this.state.cur_info;\n        for (const spanID of currentSpanIDs) {\n            infos[spanID] = info;\n        }\n\n        //call character-list modification function\n        //TODO\n        // let new_char_list = this.updateCharList();\n\n        if (this.state.sel_type === 'quotes') {\n            this.setState({selectedSpanIds: [], quote_infos: infos, cur_info: {}, confirmed: false,\n                locked: false, cur_mode: 'normal', current_sel: ''\n            }, () => this.saveCurrent(event));\n        }\n        else {\n            this.setState({selectedSpanIds: [], men_infos: infos, cur_info: {}, confirmed: false,\n                locked: false, cur_mode: 'normal', current_sel: ''\n            }, () => this.saveCurrent(event));\n        }\n\n\n    }\n\n    updateSelectedRows(newRows) {\n        this.setState({selectedRows: newRows});\n    }\n\n    setField(field, value) {\n        //for speaker and speakee -- take selected boxes from character list\n        let cur_info = this.state.cur_info;\n\n        if (field === 'speaker') {\n            //cur_info.speaker = this.state.selectedRows;\n            let selectedROws = this.state.selectedRows; //names\n            //let selectedIds = selectedROws.map((x) => this.getCharValue(x)); //check for undefined. //name 2 \n            cur_info.speaker = selectedROws;\n            this.setState({cur_info: cur_info, cur_mode: 'normal', selectedRows: []});\n        }\n\n        else if (field === 'speakee') {\n            //cur_info.speakee = this.state.selectedRows;\n            let selectedROws = this.state.selectedRows;\n            //let selectedIds = selectedROws.map((x) => this.getCharValue(x));\n            \n             //check for undefined.\n            cur_info.speakee = selectedROws;\n            this.setState({cur_info: cur_info, cur_mode: 'normal', selectedRows: []});\n        }\n\n        else if (field === 'ref_exp') {\n            cur_info.ref_exp = this.state.cur_ref_exp;\n            this.setState({locked: true, cur_mode: 'normal', cur_info: cur_info, cur_ref_exp: ''});\n            window.getSelection().empty();\n        }\n\n        else if (field === 'quote_type') {\n            cur_info.quote_type = value;\n            if (value === 'Implicit') {\n                cur_info.ref_exp = '';\n            }\n            this.setState({cur_info: cur_info, cur_mode: 'normal'});\n        }\n\n        else if (field === 'merge-chars') {\n            let selectedRows = this.state.selectedRows;\n            let [newCharList, qinfos, minfos] = this.mergeChars(selectedRows);\n            //let newCharToMain = aliasToChar(newCharList);\n            this.setState({charList: newCharList, quote_infos: qinfos, men_infos: minfos, cur_mode: 'normal', selectedRows: []}, () => this.saveCurrent());\n        }\n\n    }\n\n    updateMode(mode) {\n        let selectedRows = this.state.selectedRows;\n        if (mode === 'speaker') {\n            selectedRows = this.state.cur_info.speaker;\n            this.setState({cur_mode: mode, selectedRows: selectedRows});\n        }\n        else if (mode === 'speakee') {\n            selectedRows = this.state.cur_info.speakee;\n            this.setState({cur_mode: mode, selectedRows: selectedRows});\n        }\n        else if (mode === 'merge') {\n            //let newCharList = this.mergeChars(selectedRows);\n            selectedRows = [];\n            this.setState({cur_mode: mode, selectedRows: selectedRows})\n        }\n        else {\n            selectedRows = [];\n            if (mode === 'ref_exp') {\n                this.setState({cur_mode: mode, selectedRows: selectedRows, locked: false, cur_ref_exp: ''});\n            }\n            else {\n                this.setState({cur_mode: mode, selectedRows: selectedRows});\n            }\n        }\n    }\n\n    updateInfos(curChar, newChar, qinfos, minfos) {\n\n        let qcount = 0;\n        let mcount = 0;\n\n        let cinfos = this.getCharDicts();\n        let c2q = cinfos['quote'];\n        let c2m = cinfos['mention'];\n\n        if (curChar.id in c2q) {\n            c2q[curChar.id].forEach((qid) => {\n                qinfos[qid].speaker = qinfos[qid].speaker.map((s) => {\n                    if (s === curChar.id) {\n                        qcount += 1;\n                        return newChar.id; \n                        \n                    }\n                    else {\n                        return s;\n                    }\n                })\n                qinfos[qid].speakee = qinfos[qid].speakee.map((s) => {\n                    if (s === curChar.id) {\n                        qcount += 1;\n                        return newChar.id; \n                    }\n                    else {\n                        return s;\n                    }\n                })\n            })\n        }\n\n        if (curChar.id in c2m) {\n            c2m[curChar.id].forEach((mid) => {\n               \n                minfos[mid].speakee = minfos[mid].speakee.map((s) => {\n                    if (s === curChar.id) {\n                        mcount += 1;\n                        return newChar.id; \n                    }\n                    else {\n                        return s;\n                    }\n                })\n            })\n        }\n\n        return  [qinfos,  minfos, qcount, mcount];\n\n    }\n\n    mergeChars(selectedRows) {\n\n        let qinfos = JSON.parse(JSON.stringify(this.state.quote_infos));\n        let minfos = JSON.parse(JSON.stringify(this.state.men_infos));\n\n        let qcount = 0;\n        let mcount = 0;\n\n        let qc = 0;\n        let mc = 0;\n\n        let curCharList = this.state.charList;\n        let mergeRows = [];\n        let insIndex = [];\n        let newCharList = curCharList.filter( function(el, index) {\n            let val = selectedRows.includes(el.id);\n            if (val) {\n                insIndex.push(index);\n                mergeRows.push(el);\n            }\n            return !(val)\n\n        });\n        \n        insIndex = insIndex[0];\n        //merge\n        let main_char = mergeRows[0];\n\n        for (var i=1; i<mergeRows.length; i++) {\n            let cur_char = mergeRows[i];\n            [qinfos, minfos, qc, mc] = this.updateInfos(cur_char, main_char, qinfos, minfos);\n            qcount += qc;\n            mcount += mc;\n\n            let alias = {\n                'name': cur_char.name,\n                'parent': main_char.id\n            };\n            main_char.expand.push(alias);\n            for (var j=0; i<cur_char.expand.length; j++) {\n                let cur_alias = cur_char.expand[j]\n                alias = {\n                    'name': cur_alias.name, \n                    'parent': main_char.id\n                }\n                main_char.expand.push(alias);\n            }\n        }\n\n        newCharList.splice(insIndex, 0, main_char);\n\n        let confirm = true;\n        if (qcount!==0 || mcount !==0) {\n         confirm = window.confirm(\"Changing information for: \"+qcount + \" quotes, \" + mcount+\" mentions.\");\n        }\n        if (confirm === true) {\n            return [newCharList, qinfos, minfos];\n        }\n        else {\n            return [curCharList, this.state.qinfos, this.state.minfos]; //check if this has been modified.\n        }\n\n\n\n        //return newCharList;\n    }\n\n    getNumAnnotations(charID) {\n        let cinfos = this.getCharDicts();\n\n        let count = 0;\n        if (charID in cinfos['quote']) {\n            count += cinfos['quote'][charID].length\n        }\n\n        if (charID in cinfos['mention']) {\n            count += cinfos['mention'][charID].length\n        }\n        \n        return count;\n\n    }\n\n    updateChars(new_chars) {\n        console.log(\"Updating charList in ContentBox.\");\n        console.log(\"Sorting: \")\n        new_chars.sort((a,b) => (a.name > b.name) ? 1: -1)\n        //console.log(new_chars);\n        this.setState({charList: new_chars}, () => this.saveCurrent());\n    }\n\n    getSpanInfo(spanID){\n        let infos = (this.state.sel_type === 'quotes') ? this.state.quote_infos : this.state.men_infos;\n        let curInfo = infos[spanID];\n        // let spanInfo = {};\n\n        // if (this.state.sel_type === 'quotes') {\n        //     curInfo.speaker.forEach((value) => {\n        //         spanInfo.push(this.state.charToMain[value]);\n        //     })\n        //     //let names = newVal.map((el) => id2name[el]);\n        //     spanInfo.speaker = newVal;\n    \n        // }\n        \n        // let newSpeakeeVal = [];\n        // spanInfo.speakee.forEach((value) => {\n        //     newSpeakeeVal.push(this.state.charToMain[value]);\n        // })\n        // //let names = newSpeakeeVal.map((el) => id2name[el]);\n        // spanInfo.speakee = newSpeakeeVal;\n\n        return curInfo;\n    }\n\n    setSelectionType(event) {\n        const type = event.target.value;\n        let cur_info = this.state.cur_info;\n        cur_info.sel_type = type;\n        this.setState({cur_info: cur_info})\n    }\n\n    saveCurrent() {\n        //send state to backend and clear state.\n        const data_to_save = {\n            file_name: this.props.fileName,\n            charList: this.state.charList,\n            men_ranges: this.state.men_ranges,\n            men_infos: this.state.men_infos,\n            men_span_ids: this.state.men_span_ids,\n            quote_ranges: this.state.quote_ranges,\n            quote_infos: this.state.quote_infos,\n            quote_span_ids: this.state.quote_span_ids,\n        };\n        console.log(\"SAVING STATE: \");\n        axios.post('http://127.0.0.1:8080/data', data_to_save)\n            .then(res => {\n                if (res.status === 200) {\n                       tempAlert(\"Annotation Saved!\", 3000);    //make brief popup\n                }\n                else {\n                    alert('Save failed.');\n                }\n            });\n        //event.preventDefault();\n    }\n\n    // simulateClick(e) {\n    //     e.click();\n    // }\n\n    render() {\n        let char2id = name2id(this.state.charList);\n        let id2char = id2name(this.state.charList);\n\n        if (this.props.value === '') {\n            return (\n                <div id=\"annotationareacontainer\">\n                    <div id=\"annotationarea\">\n                        <pre id=\"input-text\" className=\"lined\">\n                            {this.props.value}\n                        </pre>\n                    </div>\n                </div>\n            )\n        }\n        else {\n            const display_obj = this.processSelection();\n            const save_dis = (this.state.selectedSpanIds.length !== 0);\n            const quote_class =  (this.state.sel_type === 'mentions') ? 'side-button' : 'side-button-selected';\n            const mention_class =  (this.state.sel_type === 'quotes') ? 'side-button' : 'side-button-selected';\n            return (\n                <div id={'save-option'}>\n\n                    <div id={'context-switch'}>\n                        <span id={'instructions'}>\n                            <a style={{display: \"table-cell\"}} href={\"https://docs.google.com/document/d/1eBsX2rjdLBkmA-kWB_jHCxC1nmbzinH04WUg9PeN_2A/edit?usp=sharing\"} target=\"_blank\">Instructions</a>\n                        </span>\n\n\n                        <span id={'mentions-button'}>\n                            <button name={'switch-mentions'} id={'mentions'} className={mention_class}\n\n                                    onClick={this.handleSelChange}>\n                                Mentions\n                            </button>\n                        </span>\n                        <span id={'quotes-button'}>\n                            <button name={'switch-quotes'} id={'quotes'}  className={quote_class}\n\n                                    onClick={this.handleSelChange}>\n                                Quotes\n                            </button>\n                        </span>\n\n\n                    </div>\n\n                    <div id=\"annotationareacontainer\">\n\n                        <Collect\n                            updateChars={this.updateChars}\n                            charList={this.state.charList}\n                            id2char={id2char}\n                            char2id={char2id}\n                            selectedRows={this.state.selectedRows}\n                            updateSelectedRows={this.updateSelectedRows}\n                            getNumAnnotations={this.getNumAnnotations}\n\n                            setSelectionType={this.setSelectionType}\n                            sel_type={this.state.sel_type}\n                            selected_text={this.state.current_sel}\n                            clearSel={this.clearSel}\n                            confirmSelection={this.confirmSelection}\n                            confirmed={this.state.confirmed}\n                            cur_info={this.state.cur_info}\n                            infoSubmit={this.infoSubmit}\n                            setField={this.setField}\n                            cur_mode={this.state.cur_mode}\n                            updateMode={this.updateMode}\n                        />\n\n                        <TextArea\n                            value={display_obj}\n                            charList={this.props.charList}\n                            id2char={id2char}\n                            char2id={char2id}\n                            locked={this.state.locked}\n                            setSelection={(start, end) => this.setSelection(start, end)}\n                            onSpanClick={this.onSpanClick}\n                            clickEnabled = {this.state.confirmed !== true}\n                            getSpanInfo = {this.getSpanInfo}\n                        />\n\n                    </div>\n\n                    <div id={'save-button'}>\n                        <span>\n                            <button className={'css-button'}\n                                    //ref={this.simulateClick}\n                                    type={'submit'}\n                                    name={'save-current'}\n                                    disabled={save_dis}\n                                    onClick={this.saveCurrent}\n                            >\n                            Save Progress\n                        </button>\n                        </span>\n                        <span>\n                            <button className={'css-button'}\n                                type={'submit'} name={'clear-current'}\n                                    disabled={save_dis}\n                                    onClick={this.props.reloadState}\n                            >\n                            Reload Page\n                        </button>\n                        </span>\n\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nfunction tempAlert(msg,duration)\n{\n    var el = document.createElement(\"div\");\n    el.setAttribute(\"style\",\"position:absolute;top:40%;left:20%;background-color:white;font-size:xx-large\");\n    el.innerHTML = msg;\n    setTimeout(function(){\n        el.parentNode.removeChild(el);\n    },duration);\n    document.body.appendChild(el);\n}\n\n// function hoverBox(info) {\n\n// }\n\nfunction displaySpanInfo(event, msg) {\n\n    //console.log(event.target.offSets)\n    const left = event.clientX + \"px\";\n    const top = event.clientY + \"px\";\n\n    var el = document.createElement(\"div\");\n    el.setAttribute(\"id\", \"spanModal\")\n    el.setAttribute(\"style\",\"position:absolute; background-color:LightGray;\");\n    el.style.top = top;\n    el.style.left = left;\n    //console.log(msg);\n    el.innerHTML = msg;\n    // setTimeout(function(){\n    //     el.parentNode.removeChild(el);\n    // },duration);\n    document.body.appendChild(el);\n}\n\nfunction removeModal(event) {\n    var el = document.getElementById('spanModal');\n    el.parentNode.removeChild(el);\n}\n\nclass Collect extends React.Component{\n\n    render() {\n        console.log(\"Collect: \");\n        console.log(this.props.cur_info);\n        if (this.props.selected_text.length !== 0) {\n            if (this.props.cur_info.sel_type === 'Quote') {\n                return (\n                    <div id={'collect'}>\n                        <div id=\"charnames\">\n                            <h3>Characters</h3>\n                            <CharacterList\n                                charList={this.props.charList}\n                                id2char={this.props.id2char}\n                                char2id={this.props.char2id}\n                                updateChars={this.props.updateChars}\n                                mode={this.props.cur_mode}\n                                selectedRows={this.props.selectedRows}\n                                updateSelectedRows={this.props.updateSelectedRows}\n                                updateMode={this.props.updateMode}\n                                setField={this.props.setField}\n                                getNumAnnotations={this.props.getNumAnnotations}\n                            />\n                        </div>\n                        <div id={'middle-disp'}>\n                            <div id=\"current-selection\">\n                                <h3>Current Selection</h3>\n                                <SelectedText value={this.props.selected_text}\n                                              lockSel={this.props.confirmSelection}\n                                              clearSel={this.props.clearSel}\n                                              confirmed={this.props.confirmed}\n                                />\n                            </div>\n\n                            <div id={'collect-information'}>\n\n                                <CollectInfo\n                                    cur_info={this.props.cur_info}\n                                    charList={this.props.charList}\n                                    id2char={this.props.id2char}\n                                    char2id={this.props.char2id}\n                                    infoSubmit={this.props.infoSubmit}\n                                    cur_mode={this.props.cur_mode}\n                                    updateMode={this.props.updateMode}\n                                    setField={this.props.setField}\n                                    confirmed={this.props.confirmed}\n\n                                />\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n\n            else if (this.props.cur_info.sel_type === 'Mention') {\n                return (\n                    <div id={'collect'}>\n                        <div id=\"charnames\">\n                            <h3>Characters</h3>\n                            <CharacterList\n                                charList={this.props.charList}\n                                id2char={this.props.id2char}\n                                char2id={this.props.char2id}\n                                updateChars={this.props.updateChars}\n                                mode={this.props.cur_mode}\n                                selectedRows={this.props.selectedRows}\n                                updateSelectedRows={this.props.updateSelectedRows}\n                                updateMode={this.props.updateMode}\n                                setField={this.props.setField}\n                                getNumAnnotations={this.props.getNumAnnotations}\n                            />\n                        </div>\n                        <div id={'middle-disp'}>\n                            <div id=\"current-selection\">\n                                <h3>Current Selection</h3>\n                                <SelectedText value={this.props.selected_text}\n                                              lockSel={this.props.confirmSelection}\n                                              clearSel={this.props.clearSel}\n                                              confirmed={this.props.confirmed}\n                                />\n                            </div>\n\n                            <div id={'collect-information'}>\n\n                                <CollectMentionInfo\n                                    cur_info={this.props.cur_info}\n                                    charList={this.props.charList}\n                                    id2char={this.props.id2char}\n                                    char2id={this.props.char2id}\n                                    infoSubmit={this.props.infoSubmit}\n                                    cur_mode={this.props.cur_mode}\n                                    updateMode={this.props.updateMode}\n                                    setField={this.props.setField}\n                                    confirmed={this.props.confirmed}\n\n                                />\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n\n            else {\n                return (\n                    <div id={'collect'}>\n                        <div id=\"charnames\">\n                            <h3>Characters</h3>\n                            <CharacterList\n                                charList={this.props.charList}\n                                id2char={this.props.id2char}\n                                char2id={this.props.char2id}\n                                updateChars={this.props.updateChars}\n                                mode={this.props.cur_mode}\n                                selectedRows={this.props.selectedRows}\n                                updateSelectedRows={this.props.updateSelectedRows}\n                                updateMode={this.props.updateMode}\n                                setField={this.props.setField}\n                                getNumAnnotations={this.props.getNumAnnotations}\n                            />\n                        </div>\n                        <div id={'middle-disp'}>\n                            <div id=\"current-selection\">\n                                <h3>Current Selection</h3>\n                                <SelectedText value={this.props.selected_text}\n                                              lockSel={this.props.confirmSelection}\n                                              clearSel={this.props.clearSel}\n                                              confirmed={this.props.confirmed}\n                                />\n                            </div>\n\n                            <div id={'collect-information'}>\n                                <SelectionType\n                                    setSelectionType={this.props.setSelectionType}\n                                    confirmed={this.props.confirmed}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                )\n            }\n\n        }\n\n        else {\n            return (\n                <div id={'collect'}>\n                    <div id=\"charnames\">\n                        <h3>Characters</h3>\n                        <CharacterList\n                            charList={this.props.charList}\n                            id2char={this.props.id2char}\n                            char2id={this.props.char2id}\n                            updateChars={this.props.updateChars}\n                            mode={this.props.cur_mode}\n                            selectedRows={this.props.selectedRows}\n                            updateSelectedRows={this.props.updateSelectedRows}\n                            updateMode={this.props.updateMode}\n                            setField={this.props.setField}\n                            getNumAnnotations={this.props.getNumAnnotations}\n                        />\n                    </div>\n                    <div id={'middle-disp'}>\n                    </div>\n                </div>\n            )\n        }\n\n\n    }\n}\n\nclass SelectionType extends React.Component {\n\n    render() {\n        if (this.props.confirmed === false) {\n            return (\n                <div></div>\n            )\n        }\n        else {\n            return (\n                <div id={'selection-type'}>\n                    <h3>\n                        Select the type of the selection:\n                    </h3>\n                    <FormControl  id={'selection-type'}\n                                  m={-2}\n                    >\n                        <RadioGroup aria-label=\"position\" name=\"position\" value={this.props.value} row\n                                    onChange={(event) => this.props.setSelectionType(event)}\n                                    fontSize={'fontSize'}\n                        >\n                            <FormControlLabel\n                                value=\"Quote\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Quote\"\n                                labelPlacement=\"start\"\n                            />\n                            <FormControlLabel\n                                value=\"Mention\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Mention\"\n                                labelPlacement=\"start\"\n                            />\n                        </RadioGroup>\n\n                    </FormControl>\n                </div>\n            )\n        }\n\n\n    }\n}\n\nclass   TextArea extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n        };\n        this.onMouseUp = this.onMouseUp.bind(this);\n        this.convertToHtml = this.convertToHtml.bind(this);\n        this.getToolSpan = this.getToolSpan.bind(this);\n        this.handleHoverEnter = this.handleHoverEnter.bind(this);\n        this.handleHoverLeave = this.handleHoverLeave.bind(this);\n        this.getDetailedInfo = this.getDetailedInfo.bind(this);\n    }\n\n    getSelectionCharacterOffsetWithin(element) {\n\n            var start = 0;\n            var end = 0;\n            var doc = element.ownerDocument || element.document;\n            var win = doc.defaultView || doc.parentWindow;\n            var sel;\n            if (typeof win.getSelection != \"undefined\") {\n                sel = win.getSelection();\n                if (sel.rangeCount > 0) {\n                    var range = win.getSelection().getRangeAt(0);\n                    var preCaretRange = range.cloneRange();\n                    preCaretRange.selectNodeContents(element);\n                    preCaretRange.setEnd(range.startContainer, range.startOffset);\n                    start = preCaretRange.toString().length;\n                    preCaretRange.setEnd(range.endContainer, range.endOffset);\n                    end = preCaretRange.toString().length;\n                }\n            } else if ( (sel = doc.selection) && sel.type !== \"Control\") {\n                var textRange = sel.createRange();\n                var preCaretTextRange = doc.body.createTextRange();\n                preCaretTextRange.moveToElementText(element);\n                preCaretTextRange.setEndPoint(\"EndToStart\", textRange);\n                start = preCaretTextRange.text.length;\n                preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\n                end = preCaretTextRange.text.length;\n            }\n\n            return { start: start, end: end };\n\n    }\n\n\n    onMouseUp(event) {\n\n        if (this.props.locked === false && event.currentTarget.className === 'input-text') {\n            console.log(\"Text selected.\");\n            const target = event.currentTarget;\n            const offSets = this.getSelectionCharacterOffsetWithin(target);\n            //console.log(target, offSets);\n            if (offSets.start !== offSets.end) {\n                console.log(\"Offsets: \", offSets.start, offSets.end);\n                this.props.setSelection(offSets.start, offSets.end);\n            }\n        }\n    }\n\n\n\n    handleHoverEnter(event) {\n        //if (this.state.show === true) {\n            let spanID = event.target.id;\n            let info = this.props.getSpanInfo(spanID);\n            //console.log(event.target);\n            //console.log(\"Hovering over: \", spanID);\n            //tempAlert(String(spanID), 1000);\n            let msg = this.getToolSpan(info);\n            //console.log(msg);\n            this.setState({show: true}, displaySpanInfo(event, msg));\n            //console.log(info);\n            //tempAlert(info, 2000);\n        //}\n     }\n\n    handleHoverLeave(event) {\n        if (this.state.show === true) {\n            this.setState({show: false}, removeModal(event))\n        }\n     };\n    \n    getDetailedInfo(cur_info) {\n        const q_map = {\n            'Anaphoric': 'Pronominal',\n            'Implicit': 'Implicit',\n            'Explicit': 'Named'\n        }\n\n        let type = q_map[cur_info.quote_type];\n        let speaker = cur_info.speaker.map((el) => {return this.props.id2char[el]});\n        let speakee = cur_info.speakee.map((el) => {return this.props.id2char[el]});\n        let ref_exp = cur_info['ref_exp'];\n\n        return {\n            'sel_type': cur_info['sel_type'],\n            'quote_type': type,\n            'speaker': speaker,\n            'speakee': speakee,\n            'ref_exp': ref_exp\n            }\n\n    }\n\n    getToolSpan(cur_info){\n        //console.log(info);\n        let info = this.getDetailedInfo(cur_info);\n\n        if (info['sel_type'] === 'Quote') {\n            const type = info['quote_type']\n            const speaker = info['speaker']\n            const ref = info['ref_exp']\n            const speakee = info['speakee'].join(\"; \");\n            return (\n                \"<span> <ul><li>Type: \" + type + \"</li><li>Speaker: \"+ speaker +\"</li><li>Addressee(s): \"+speakee+\"</li><li>Ref Exp: \"+ref+\"</li></ul></span>\"\n                )\n        }\n        else if (info['sel_type'] === 'Mention') {\n            const speakee = info['speakee'].join(\"; \");\n            return (\n                \"<span><ul><li>Mention(s): \"+speakee+\"</li></ul></span>\"\n            )\n        }\n        \n    }\n\n    convertToHtml(display_obj) {\n        const texts = display_obj.texts;\n        const classes = display_obj['classes'];\n        const ids = display_obj.ids;\n\n        const spans = texts.map((value, i) => {\n            if (ids[i] !== '') {\n                //let info = this.props.getSpanInfo(ids[i]);\n                //let toolSpan = this.getToolSpan(info);\n                //console.log(toolSpan);\n                return (\n                    // disable selection for these spans\n                    // <span className=\"tooltip\">\n                        <span className={classes[i] + ' disable-selection'} \n                          id={ids[i]}\n                          onMouseUp={this.props.onSpanClick}\n                          onMouseEnter={(event) => this.handleHoverEnter(event)}\n                          onMouseLeave={(event) => this.handleHoverLeave(event)}\n                         >\n                              {value}\n                        </span>\n                        //{/* <span className='tooltiptext'>\n                          //  {toolSpan}\n                        //</span> */}\n                    // </span>\n                )             \n            }\n            else {\n                return (\n                   \n                        <span className={classes[i]}>{value}</span>\n                  \n                    \n                )\n            }\n        });\n\n        return spans;\n    }\n\n   render() {\n\n        let class_name = 'input-text';\n        // if (this.props.locked === true) {\n        //     class_name = 'input-text disable-selection';\n        // }\n        const spans = this.convertToHtml(this.props.value);\n        return (\n            <div id={'annotationarea'}\n                 className={class_name}\n                 onMouseUp={(event) => this.onMouseUp(event)}\n                 //onClick={this.props.onPrevClick}\n                 >\n                <span>\n                {spans}\n                </span>\n            </div>\n        )\n   }\n\n\n}\n\nclass CharacterList extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expandedRows: [],\n            //mergeStatus: 'none';\n        };\n\n        this.handleRowClick = this.handleRowClick.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n        this.deleteIcon = this.deleteIcon.bind(this);\n        this.handleDeleteIcon = this.handleDeleteIcon.bind(this);\n        this.checkBox = this.checkBox.bind(this);\n        this.handleCheckBox = this.handleCheckBox.bind(this);\n        this.radioBox = this.radioBox.bind(this);\n        this.handleRadioBox = this.handleRadioBox.bind(this);\n        this.addButton = this.addButton.bind(this);\n        this.handleAddChar = this.handleAddChar.bind(this);\n        this.handleDeleteAlias = this.handleDeleteAlias.bind(this);\n        this.addAliasButton = this.addAliasButton.bind(this);\n        this.handleAddAlias = this.handleAddAlias.bind(this);\n        this.mergeButton = this.mergeButton.bind(this);\n        this.handleMergeClick = this.handleMergeClick.bind(this);\n        this.handleMakeMainName = this.handleMakeMainName.bind(this);\n    }\n\n    handleMergeClick() {\n        if (this.props.mode === 'normal') {\n            this.props.updateMode('merge');\n        }\n        else if (this.props.mode === 'merge') {\n            this.props.setField('merge-chars');\n        }\n    }\n\n\n    handleRowClick(rowId) {\n        console.log(rowId)\n        const currentExpandedRows = this.state.expandedRows;\n        const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\n\n        const newExpandedRows = isRowCurrentlyExpanded ?\n            currentExpandedRows.filter(id => id !== rowId) :\n            currentExpandedRows.concat(rowId);\n\n        this.setState({expandedRows : newExpandedRows});\n    }\n\n    handleDeleteIcon(el) {\n\n        console.log(el);\n        let numAnnots = this.props.getNumAnnotations(el.id);\n        if (numAnnots!==0){\n            alert(\"Error! There are \" + numAnnots + \" annotations that still use this character.\")\n        }\n\n\n        else {\n            const confirm = window.confirm(\"Deleting the following character with all aliases: \"+el.name);\n\n            if (confirm === true) {\n\n                const oldChars = this.props.charList;\n\n                const newChars = oldChars.filter((c) => {\n                    return c.name !== el.name;\n                });\n                //this.setState({charList: newChars});\n                this.props.updateChars(newChars);\n                }\n\n        }\n        \n    }\n\n    deleteIcon(el) {\n        return (\n            <span id={'delete-button-' + el.id}>\n                <button name={'D'} onClick={() => this.handleDeleteIcon(el)}>Del</button>\n            </span>\n        )\n    }\n\n    handleCheckBox(el) {\n        console.log(el.name, el.id);\n        const currentSelectedRows = this.props.selectedRows;\n        const isRowCurrentlySelected = currentSelectedRows.includes(el.id);\n        console.log(currentSelectedRows, isRowCurrentlySelected, Array.isArray(currentSelectedRows));\n\n        if (isRowCurrentlySelected === true) {\n            console.log(\"Handle checkBox \" + el.id + \" \" + el.name);\n        }\n\n        const newSelectedRows = isRowCurrentlySelected ?\n            currentSelectedRows.filter((id) => ((id !== el.id))) :\n            currentSelectedRows.concat(el.id);\n        console.log(\"New selected rows: \" + newSelectedRows, Array.isArray(newSelectedRows));\n        this.props.updateSelectedRows(newSelectedRows);\n    }\n\n    checkBox(el) {\n        let disabled = false;\n        let currentSelectedRows = this.props.selectedRows;\n        // console.log(currentSelectedRows, Array.isArray(currentSelectedRows));\n        let checked = currentSelectedRows.includes(el.id);\n\n        if (checked === true) {\n            console.log(el.name + \": \"+ el.id);\n        }\n\n        if (this.props.mode === 'normal' || this.props.mode === 'ref_exp' || this.props.mode === 'done') {\n            disabled = true;\n            checked = false;\n        }\n        //console.log(this.props.selectedRows);\n\n\n        return (\n            <input type={'checkbox'} disabled={disabled}\n                   checked={checked} onClick={() => this.handleCheckBox(el)} />\n        )\n    }\n\n    handleRadioBox(el) {\n        const currentSelectedRows = [];\n        //const isRowCurrentlySelected = (currentSelectedRows.length > 0);\n\n        const newSelectedRows = currentSelectedRows.concat(el.id);\n\n        this.props.updateSelectedRows(newSelectedRows);\n    }\n\n    radioBox(el) {\n        const checked = this.props.selectedRows.includes(el.id);\n\n        return (\n            <input type={'radio'}\n                   checked={checked} onClick={() => this.handleRadioBox(el)} />\n        )\n    }\n\n    handleDeleteAlias(el, alias) {\n\n        const old_chars = this.props.charList;\n\n        const old_expand = el.expand;\n        const new_expand = old_expand.filter((al) => al.name !== alias.name);\n\n        old_chars.forEach((c) => {\n            if (c.id === el.id) {\n                c.expand = new_expand;\n            }\n        });\n\n        this.props.updateChars(old_chars);\n    }\n\n    addAliasButton(item) {\n        return (\n            <span>\n                <button name={'add-alias'} onClick={() => this.handleAddAlias(item)}>New</button>\n            </span>\n        )\n    }\n\n    handleAddAlias(el) {\n        const old_chars = this.props.charList;\n        // let ids = []\n\n        // old_chars.forEach((value, index) => {\n        //     //main name\n        //     ids.push(value.id);\n    \n        //     value.expand.forEach((alias) => {\n        //         ids.push(alias.id) \n        //     })\n        // })\n\n        // const next_id = Math.max(ids) + 1\n\n        let aliasName = window.prompt(\"Enter new alias name for \"+el.name+\" : \");\n        aliasName = toTitleCase(aliasName);\n\n        if (aliasName in this.props.char2id) {\n            alert(\"Name already exists in character list.\")\n        }\n\n        else{\n\n            old_chars.forEach((c) => {\n                if (c.id === el.id) {\n                    c.expand.push({\n                        name: aliasName,\n                        parent: el.id\n                    });\n                }\n            });\n\n            this.props.updateChars(old_chars);\n        }\n    }\n\n    getAliasRow(alias){\n\n    }\n\n    handleMakeMainName(el, alias) {\n\n        let oldCharList = this.props.charList;\n\n        let newCharList = oldCharList.map((c) => {\n            if (c.id === el.id) {\n                let new_c = {'id': c.id, 'parent': c.parent, 'name': alias.name}\n                let old_name = c.name;\n                let new_expand = c.expand.map((oa) => {\n                    if (oa.name === alias.name) {\n                        return {'name': old_name, 'parent': oa.parent}\n                    }\n                    else{\n                        return oa\n                    }\n                })\n\n                new_c['expand'] = new_expand;\n                return new_c;\n            }\n            else { return c }\n        })\n\n        this.props.updateChars(newCharList);\n    }\n\n    renderItem(item) {\n        const clickCallback = () => this.handleRowClick(item.id);\n        const deleteIcon = this.deleteIcon(item);\n\n        let icon = null;\n\n        if (this.props.mode !== 'speaker') {\n            icon = this.checkBox(item)\n        }\n        else {\n            icon = this.radioBox(item)\n        }\n\n\n        const itemRows = [\n            <tr key={\"row-data-\" + item.id}>\n                <td className={'td-normal'}>{icon}</td>\n                <td onClick={clickCallback} className={'td-normal row-name'}>{item.name}</td>\n                <td className={'td-left'}>{deleteIcon}</td>\n            </tr>\n        ];\n\n        if (this.state.expandedRows.includes(item.id)) {\n            itemRows.push(\n                <tr>\n                    <td></td>\n                    <td><b>Aliases</b></td>\n                    <td>{this.addAliasButton(item)}</td>\n                </tr>\n            );\n            item.expand.forEach((el) => {\n                itemRows.push(\n                    <SubTable\n                        item={item}\n                        alias={el}\n                        handleDeleteAlias={this.handleDeleteAlias}\n                        handleMakeMainName={this.handleMakeMainName}\n\n                    />\n                );\n            });\n            }\n\n        return itemRows;\n    }\n\n    handleAddChar() {\n        let name = window.prompt(\"Enter character name: \");\n        name = toTitleCase(name);\n        \n        const old_chars = this.props.charList;\n\n        let ids = []\n\n        old_chars.forEach((value, index) => {\n            //main name\n            ids.push(value.id);\n        })\n\n        const next_id = Math.max(...ids) + 1\n\n        if (name in this.props.char2id) {\n            alert(\"Name already exists in character list.\")\n        }\n\n        else {\n\n            old_chars.push({\n                name: name,\n                id: next_id,\n                parent: next_id,\n                expand: []\n            });\n            //this.setState({charList: old_chars}); //is this needed?? Just use props.\n            this.props.updateChars(old_chars);\n        }\n    }\n\n    addButton() {\n        return (\n            <span>\n                <button name={'Add-char'}\n                        onClick={this.handleAddChar}\n                        className={'char-top-buttons'}\n                >\n                    Add\n                </button>\n            </span>\n        )\n    }\n\n    mergeButton() {\n        let text = 'Merge';\n        if (this.props.mode === 'merge') {\n            text = 'Submit';\n        }\n        return (\n            <span>\n                <button name={'Merge-char'}\n                        onClick={this.handleMergeClick}\n                        className={'char-top-buttons'}\n                >{text}</button>\n            </span>\n        )\n    }\n\n    render() {\n\n        console.log(\"Rendering character list with: \" + this.props.selectedRows.length);\n        let allItemRows = [];\n\n        this.props.charList.forEach(item => {\n            const perItemRows = this.renderItem(item);\n            allItemRows = allItemRows.concat(perItemRows);\n        });\n\n        return (\n            <div id={'character-list'}>\n                <table>\n                    <thead>\n                        <tr>\n                            <td>\n                                ---\n                            </td>\n                            <td style={{width: \"50%\"}}>\n                                {this.addButton()}\n                            </td>\n                            <td style={{width: \"75%\"}}>\n                                {this.mergeButton()}\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {allItemRows}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n}\n\nclass SubTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    deleteAliasIcon(item, alias) {\n        return (\n            <span id={'delete-button-' + alias.name}>\n                <button name={'D'} onClick={() => this.props.handleDeleteAlias(item, alias)}>Del</button>\n            </span>\n        )\n    }\n\n    makeMainNameIcon(item, alias) {\n        return (\n            <span id={'make-main-' + alias.name}>\n                <button name={'Main'} onClick={() => {this.props.handleMakeMainName(item, alias)}}>Main</button>\n            </span>\n        )\n    }\n\n    render() {\n        //console.log(this.props.item.expand);\n        const el = this.props.alias;\n        let icon = null;\n        // if (this.props.mode !== 'speaker') {\n        //     icon = this.checkBox(item.name)\n        // }\n        // else {\n        //     icon = this.radioBox(item.name)\n        // }\n\n        return (\n            <tr key={el.name}>\n                <td></td>\n                <td className={'td-normal'}>{\n                    this.makeMainNameIcon(this.props.item, el)\n                }</td>\n                <td className={'td-alias'}>\n                    {el.name}\n                </td>\n                <td>\n                    {this.deleteAliasIcon(this.props.item, el)}\n                </td>\n            </tr>\n        )\n    }\n}\n\nclass CollectInfo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.setQuoteType = this.setQuoteType.bind(this);\n        this.onRefExpSubmit = this.onRefExpSubmit.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.onReviewEdit = this.onReviewEdit.bind(this);\n        this.getDetailedInfo = this.getDetailedInfo.bind(this);\n    }\n\n    setQuoteType(event) {\n        const quote_type = event.target.value;\n        this.props.setField('quote_type', quote_type);\n    }\n\n\n    onRefExpSubmit() {\n        this.props.setField('ref_exp', this.state.ref_exp);\n    }\n\n    onSubmit() {\n        //this.props.onSubmit();\n        console.log(\"Info submitted\");\n        this.props.updateMode('done');\n    }\n\n    onConfirm(event) {\n        this.props.infoSubmit(event);\n    }\n\n    onReviewEdit() {\n        this.props.updateMode('normal');\n    }\n\n    getDetailedInfo(cur_info) {\n        let type = cur_info.quote_type;\n        let speaker = cur_info.speaker.map((el) => {return this.props.id2char[el]});\n        let speakee = cur_info.speakee.map((el) => {return this.props.id2char[el]});\n        let ref_exp = cur_info['ref_exp'];\n\n        return {\n            'sel_type': cur_info['sel_type'],\n            'quote_type': type,\n            'speaker': speaker,\n            'speakee': speakee,\n            'ref_exp': ref_exp\n            }\n    }\n\n    render() {\n\n        const ref_disable = (this.props.cur_info.quote_type === 'Implicit') || (this.props.cur_info.quote_type === '');\n        let info = this.getDetailedInfo(this.props.cur_info)\n        //console.log(\"CollectInfo\");\n        //console.log(this.props.cur_info);\n        if (this.props.confirmed === false) {\n            return (\n                <div>\n\n                </div>\n            )\n        }\n        else {\n            if (this.props.cur_mode !== 'done') {\n\n                return (\n                    <div id={'quote-info'}>\n                        <QuoteType\n                            setQuoteType={this.setQuoteType}\n                            value={info.quote_type}\n                            mode={this.props.cur_mode}\n                        />\n\n                        <SpeakerInfo\n                            updateMode={this.props.updateMode}\n                            value={info.speaker}\n                            mode={this.props.cur_mode}\n                            setField={this.props.setField}\n                        />\n\n                        <SpeakeeInfo\n                            updateMode={this.props.updateMode}\n                            value={info.speakee}\n                            mode={this.props.cur_mode}\n                            setField={this.props.setField}\n                            message={\"Select Addressee\"}\n                            selType={info.sel_type}\n                        />\n\n                        <RefExpInfo\n                            updateMode={this.props.updateMode}\n                            value={info.ref_exp}\n                            mode={this.props.cur_mode}\n                            setField={this.props.setField}\n                            active={ref_disable}\n                        />\n\n                        <SubmitInfoButton\n                            //onSubmit={this.onSubmit}\n                            onSubmit={this.onConfirm} //to skip steps\n                        />\n                    </div>\n                )\n\n\n            } else {\n                return (\n                    <DisplayInfo speaker={info.speaker}\n                                 speakee={info.speakee}\n                                 ref_exp={info.ref_exp}\n                                 onConfirm={this.onConfirm}\n                                 onBack={this.onReviewEdit}\n                    />\n                )\n            }\n        }\n    }\n}\n\nclass CollectMentionInfo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onReviewEdit = this.onReviewEdit.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.getDetailedInfo = this.getDetailedInfo.bind(this);\n    }\n\n    onConfirm(event) {\n        this.props.infoSubmit(event);\n    }\n\n    onReviewEdit() {\n        this.props.updateMode('normal');\n    }\n\n    onSubmit() {\n        //this.props.onSubmit();\n        console.log(\"Info submitted\");\n        this.props.updateMode('done');\n    }\n\n    getDetailedInfo(cur_info) {\n        let type = cur_info.quote_type  ;\n        let speaker = cur_info.speaker.map((el) => {return this.props.id2char[el]});\n        let speakee = cur_info.speakee.map((el) => {return this.props.id2char[el]});\n        let ref_exp = cur_info['ref_exp'];\n\n        return {\n            'sel_type': cur_info['sel_type'],\n            'quote_type': type,\n            'speaker': speaker,\n            'speakee': speakee,\n            'ref_exp': ref_exp\n            }\n    }\n\n\n    render() {\n        let info = this.getDetailedInfo(this.props.cur_info);\n\n        if (this.props.confirmed === false) {\n            return (\n                <div>\n\n                </div>\n            )\n        }\n\n        else if (this.props.cur_mode !== 'done') {\n            return (\n                <div id={'collect-mention'}>\n                    <SpeakeeInfo\n                        updateMode={this.props.updateMode}\n                        value={info.speakee}\n                        mode={this.props.cur_mode}\n                        setField={this.props.setField}\n                        message={\"Select Entity being referred to \"}\n                        selType={info.sel_type}\n                    />\n                    <SubmitInfoButton\n                        //onSubmit={this.onSubmit}\n                        onSubmit={this.onConfirm}\n                />\n                </div>\n            )\n        }\n\n        else {\n            return (\n                <DisplayInfo\n                             speakee={info.speakee}\n                             onConfirm={this.onConfirm}\n                             onBack={this.onReviewEdit}\n                />\n            )\n        }\n\n    }\n}\n\nclass QuoteType extends React.Component {\n\n    render() {\n        return (\n            <div className={'border'}>\n                <FormControl  id={'quote-type'}\n                              m={-2}\n                >\n                    <h3>Select Quote Type</h3>\n                    <RadioGroup aria-label=\"position\" name=\"position\" value={this.props.value} row\n                                onChange={(event) => this.props.setQuoteType(event)}\n                                fontSize={'fontSize'}\n                    >\n                        <FormControlLabel\n                            value=\"Implicit\"\n                            control={<Radio color=\"primary\" />}\n                            label=\"Implicit\"\n                            labelPlacement=\"start\"\n                        />\n                        <FormControlLabel\n                            value=\"Anaphoric\"\n                            control={<Radio color=\"primary\" />}\n                            label=\"Pronominal\"\n                            labelPlacement=\"start\"\n                        />\n                        <FormControlLabel\n                            value=\"Explicit\"\n                            control={<Radio color=\"primary\" />}\n                            label=\"Named\"\n                            labelPlacement=\"start\"\n                            fontSize={'fontSize'}\n                        />\n                    </RadioGroup>\n\n                    {/*<FormHelperText>Select Quote Type</FormHelperText>*/}\n\n                </FormControl>\n            </div>\n        )\n    }\n}\n\nclass SpeakerInfo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onEdit = this.onEdit.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onDivClick = this.onDivClick.bind(this);\n    }\n\n    onDivClick() {\n        if (this.props.mode === 'speaker') {\n            this.onSubmit()\n        }\n        else if (this.props.mode === 'normal') {\n            this.onEdit()\n        }\n    }\n\n    onEdit() {\n        if (this.props.mode === 'normal') {\n            this.props.updateMode('speaker');\n        }  \n    }\n\n    onSubmit() {\n        if (this.props.mode === 'speaker') {\n            this.props.setField('speaker');\n        }\n        \n    }\n\n    render() {\n        const display_message = (this.props.value === '') ? \"None set.\" : this.props.value;\n        const color = (this.props.mode === \"speaker\") ? \"green\" : \"black\";\n        const disabled = (this.props.mode === \"speaker\") ? true : false;\n        return (\n            <div className={'border'}\n                id={'select-speaker'}\n                 onClick={this.onDivClick}\n                 //disabled={disabled}\n                 style={{ cursor: \"pointer\"}}\n            >\n                <h3 style={{ color: color }}>Select Speaker</h3>\n                <div><i>Select the speaker from the character list on the left, and press Submit when done.</i></div>\n                <span><b>Speaker:</b> {display_message} </span>\n                <span>\n                    <button type={'submit'}\n                            name={'speaker-edit'}\n                            onClick={this.onEdit}\n                            disabled={disabled}>Edit</button>\n                </span>\n                <span>\n                    <button type={'submit'} name={'speaker-ok'} onClick={this.onSubmit}>Submit</button>\n                </span>\n            </div>\n        )\n\n    }\n}\n\nclass SpeakeeInfo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onEdit = this.onEdit.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onDivClick = this.onDivClick.bind(this);\n    }\n\n    onEdit() {\n        this.props.updateMode('speakee');\n    }\n\n    onSubmit() {\n        this.props.setField('speakee');\n    }\n\n    onDivClick() {\n        if (this.props.mode === 'speakee') {\n            this.onSubmit()\n        }\n        else if (this.props.mode === 'normal') {\n            this.onEdit()\n        }\n    }\n\n    render() {\n        // console.log(\"Speakee: \");\n        // console.log(this.props.value);\n        const message = (this.props.value === '') ? 'None set' : this.props.value.join('; ');\n        const color = (this.props.mode === 'speakee') ? \"green\" : \"black\";\n        const disabled = (this.props.mode === \"speakee\") ? true : false;\n\n        const heading = (this.props.selType === 'Mention') ? \"Mention(s)\" : \"Addressee(s)\";\n\n        return (\n            <div className={'border'}\n                id={'select-speakee'}\n                 onClick={this.onDivClick}\n                 style={{ cursor: \"pointer\"}}\n            >\n                <h3 style={{ color: color }}>Select {heading}</h3>\n                <div><i>{this.props.message} from the character list on the left, and press Submit when done. If there are multiple, select all possible ones.</i></div>\n                <span><b>{heading}(s):</b> {message} </span>\n                <span>\n                    <button type={'submit'}\n                            name={'speakee-edit'}\n                            onClick={this.onEdit}\n                            disabled={disabled}\n                    >Edit</button>\n                </span>\n                <span>\n                    <button type={'submit'} name={'speakee-ok'} onClick={this.onSubmit}>Submit</button>\n                </span>\n            </div>\n        )\n\n    }\n\n}\n\nclass SelectedText extends React.Component {\n\n    render() {\n        if (this.props.value ==='') {\n            return (\n                <div id=\"current-text\">\n\n                </div>\n            )\n        }\n        else {\n            return (\n                <div id=\"cur-sel\">\n\n                    <div id=\"current-text\">\n                        <p>{this.props.value}</p>\n                        <form\n                            className='lockSel'\n                        >\n                            <span>\n                                <button type=\"submit\" value=\"OK\" name=\"submit\" id='lock-sel' onClick={this.props.lockSel}>\n                                    OK\n                                </button>\n                            </span>\n\n                            <span>\n                                <button type='submit' onClick={this.props.clearSel}>\n                                    Clear\n                                </button>\n                            </span>\n                        </form>\n                    </div>\n\n\n                </div>\n\n            )\n        }\n    }\n}\n\nclass RefExpInfo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onEdit = this.onEdit.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onDivClick = this.onDivClick.bind(this)\n    }\n\n    onEdit() {\n        this.props.updateMode('ref_exp');\n    }\n\n    onSubmit() {\n        this.props.setField('ref_exp');\n    }\n\n    onDivClick() {\n        if (this.props.mode === 'ref_exp') {\n            this.onSubmit()\n        }\n        else if (this.props.mode === 'normal') {\n            this.onEdit()\n        }\n    }\n\n    render() {\n        // console.log(\"Speakee: \");\n        // console.log(this.props.value);\n        const message = (this.props.value === '') ? 'None set' : this.props.value;\n        const color = (this.props.mode === 'ref_exp') ? \"green\" : \"black\";\n        const disabled = (this.props.mode === \"ref_exp\") ? true : false;\n        if (this.props.active) {\n            return null\n        }\n        else {\n            return (\n\n                <div className={'border'}\n                    id={'select-ref_exp'}\n                     onClick={this.onDivClick}\n                     style={{ cursor: \"pointer\"}}\n                >\n                    <h3 style={{ color: color }}>Select Referring Expression</h3>\n                    <div><i>Select the referring expression from the text area on the right and click Submit when done.</i></div>\n                    <span><b>Referring Expression:</b> {message} </span>\n                    <span>\n                    <button type={'submit'} name={'speakee-edit'}\n                            onClick={this.onEdit}\n                            disabled={disabled}\n                    >Edit</button>\n                </span>\n                    <span>\n                    <button type={'submit'} name={'speakee-ok'}\n                            onClick={this.onSubmit}>Submit</button>\n                </span>\n                </div>\n            )\n        }\n\n    }\n}\n\nclass SubmitInfoButton extends React.Component {\n    render() {\n        return (\n            <div>\n                <button id={'submit-info-button'}\n                    type=\"submit\" value=\"Submit-info\" onClick={this.props.onSubmit}>Submit Info </button>\n            </div>\n            )\n\n    }\n}\n\nclass DisplayInfo extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let ref_exp = '';\n        if ('ref_exp' in this.props) {\n            ref_exp = this.props.ref_exp;\n        }\n\n        if ('speaker' in this.props) {\n            const speakee = this.props.speakee.join(\"; \");\n            return (\n                <div id={'display-info'}>\n                    <div id={'info'}>\n\n                        <h3>Review Quote Information: </h3>\n                        <ul>\n                            <li><b>Speaker: </b>{this.props.speaker}</li>\n                            <li><b>Addressee: </b>{speakee}</li>\n                            <li><b>Referring Expression: </b>{ref_exp}</li>\n                        </ul>\n                    </div>\n\n                    <div>\n                    <span>\n                        <button type={'submit'} name={'confirm-info'}\n                                onClick={this.props.onConfirm}\n                        >\n                            Confirm\n                        </button>\n                    </span>\n                        <span>\n                        <button type={'submit'} name={'edit-info'}\n                                onClick={this.props.onBack}\n                        >\n                            Back\n                        </button>\n                    </span>\n                    </div>\n                </div>\n            )\n        }\n\n        else {\n            return (\n                <div id={'display-info'}>\n                    <div id={'info'}>\n\n                        <h3>Review Mention Information: </h3>\n                        <ul>\n                            <li><b>Entity: </b>{this.props.speakee.join('; ')}</li>\n                        </ul>\n                    </div>\n\n                    <div>\n                    <span>\n                        <button type={'submit'} name={'confirm-info'}\n                                onClick={this.props.onConfirm}\n                        >\n                            Confirm\n                        </button>\n                    </span>\n                        <span>\n                        <button type={'submit'} name={'edit-info'}\n                                onClick={this.props.onBack}\n                        >\n                            Back\n                        </button>\n                    </span>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n\n}\n\nexport default Tool;\n\n// ReactDOM.render(\n//     <Tool />,\n//     document.getElementById('root')\n// );\n","import React from 'react';\nimport axios from 'axios';\nimport './analyze.css'\n// import { render } from 'react-dom';\n\n// const path = require('path')\n// const fs = require('fs')\n\nconst ANN_NAMES = ['Alanna', 'Beck', 'Bisman', 'Jovana','Leah', 'Sanghoon', 'Sofia', 'Sol']; //ADD\nconst AXIOS_HEADER = {  \n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'}\n\n\nfunction Footer(props) {\n    return (\n        <div id='clear-button'>\n            {/* <button className={'css-button'}\n                    //ref={this.simulateClick}\n                    type={'submit'}\n                    name={'clear-all'}\n                    //disabled={save_dis}\n                   \n            >\n            Clear \n        </button> */}\n\n\n        </div>\n    )\n    \n}\n\nclass Analyze extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            status: 'names',\n            name_1: '',\n            name_2: '',\n        }\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n        let target_name = event.target.id;\n        let value = event.target.value;\n        console.log(target_name);\n\n        if (target_name==='name_1') {\n            this.setState({name_1: value})\n        }\n        else if (target_name==='name_2') {\n            this.setState({name_2: value})\n        }\n    }\n\n    render() {\n        return (\n            <div className='analyze-main'>\n                <h1>Analyze Disagreements</h1>\n                <div id='get-names'>\n                    <h2>Step 1: Choose Annotator Names: </h2>\n                    <AnnNames \n                    name_1={this.state.name_1}\n                    name_2={this.state.name_2}\n                    handleNameChange={this.handleNameChange}\n                    />\n                </div>\n                <div id='steps'>\n                    <span>\n                        <h2>Step 2: Check Character Agreement:</h2>\n                        <CharacterList \n                        name_1={this.state.name_1}\n                        name_2={this.state.name_2}\n                        />\n                    </span>\n                    <span>\n                        <h2>Step 3: Generate Disagreement Document: </h2>\n                        <GenDis \n                        name_1={this.state.name_1}\n                        name_2={this.state.name_2}\n                        />\n                    </span>\n                </div>\n\n                {/* <div>\n                    <Footer />\n                </div> */}\n            </div>\n        )\n    }\n}\n\nclass AnnNames extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.renderItem = this.renderItem.bind(this);\n    }\n\n\n    renderItem(names) {\n\n        let items = [<option value=''></option>]\n\n        names.forEach((name) => {\n            let item = <option value={name}>{name}</option>\n            items.push(item);\n        })\n\n        return items;\n    }\n\n    render() {\n\n        let itemRows = this.renderItem(ANN_NAMES);\n        return (\n            <div id='input-names'>\n                <span className='name-select'>\n                <h3 className={'init-heading'}> Annotator 1: </h3>\n                    <select \n                     id='name_1'\n                    value={this.props.name_1}\n                    onChange={this.props.handleNameChange}\n                    >\n                        {itemRows}\n                        {/* <option value=''></option>\n                        <option value='Beck'>Beck</option>\n                        <option value='Leah'>Leah</option>\n                        <option value='Jovana'>Jovana</option>\n                        <option value='Sanghoon'>Sanghoon</option> */}\n                    </select>\n                </span>\n                <span className='name-select' >\n                <h3 className={'init-heading'}> Annotator 2: </h3>\n                    <select \n                    id='name_2'\n                    value={this.props.name_2}\n                    onChange={this.props.handleNameChange}\n                    >\n                        {itemRows}\n                    </select>\n                </span>\n            </div>\n        )\n    }\n}\n\nfunction LoadFolderButton(props) {\n    return (\n        <span className=\"loadChar\">\n            <h3 className={'init-heading'}> {props.msg} </h3>\n            <input type=\"file\"\n                name={props.name}\n                directory=\"\"\n                webkitdirectory=\"\"\n                onChange={props.handleUpload}\n            />\n            \n        </span>\n    )\n}\n\nfunction LoadFileButton(props) {\n    return (\n        <span className=\"loadFolder\">\n            <h3 className={'init-heading'}> {props.msg} </h3>\n            <input type=\"file\"\n                name={props.name}\n                accept='.json'\n                onChange={props.handleUpload}\n            />\n        </span>\n    )\n}\n\n\nclass CharacterList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            file_1: '',\n            file_2: '',\n            statusLists: '',\n            indicator: 0\n        }\n        this.handleUpload = this.handleUpload.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        //this.readFile = this.readFile.bind(this);\n    }\n\n    // readFile(file) {\n    //     let reader = new FileReader();\n    //     reader.onload = async (e) => { \n    //         const text = (e.target.result)\n    //         //console.log(text)\n    //         return text;\n            \n    //         //alert(text)\n    //       };\n    //       reader.readAsText(file)\n\n    // }\n\n    handleUpload(event) {\n\n        let button_id = event.target.name;\n        let data = {}\n        \n\n        for (let i=0; i< event.target.files.length; i=i+1) {\n            let file = event.target.files[i];\n            let filename = event.target.files[i].name;\n            let reader = new FileReader();\n\n            if (filename[0] !== '.') {\n                reader.readAsText(file, 'UTF-8');\n                reader.onload = function(e) {\n                    data[filename] = e.target.result;\n                }\n              \n            }\n        }\n\n        if (button_id === 'file1') {\n            this.setState({file_1:data})\n        }\n        else if (button_id === 'file2') {\n            this.setState({file_2:data})\n        }\n    }\n\n    handleSubmit(event) { \n\n        if (this.props.name_1 === '' || this.props.name_2 === '' || this.props.name_2 === this.props.name_1) {\n            alert(\"Invalid annotator names selected.\");\n        }\n\n        else if (this.state.file_1 === '' || this.state.file_2==='') {\n            //alert(\"File(s) missing. \")\n            \n        }\n\n        else {\n            let n1 = this.props.name_1;\n            let n2 = this.props.name_2;\n            let charLists = {[n1]: this.state.file_1, [n2]: this.state.file_2}\n            //send to server\n            //alert(\"Generating Disagreements.\")\n            //check character agreements\n            axios.get('http://127.0.0.1:8080/charStatus', \n                {\n                    params: {\n                        'charLists': charLists\n                    }\n                }).then(res => {\n                    //console.log(res.data.statusLists);\n                    //return res.data.statusLists;\n                    this.setState({\n                        statusLists: res.data.statusLists,\n                        indicator: res.data.indicator\n                    })\n                });\n        }\n    }\n\n    render() {\n\n        return (\n            <div id='charAnalyze'>\n                <div id='charUpload'>\n                \n                    <LoadFileButton \n                    name='file1'\n                    handleUpload={this.handleUpload}\n                    msg={\"JSON 1: \" + this.props.name_1}\n                    />\n                \n                \n                    <LoadFileButton \n                    name='file2'\n                    handleUpload={this.handleUpload}\n                    msg={\"JSON 2: \" + this.props.name_2}\n                    />\n\n                    <button type='button' onClick={this.handleSubmit}>\n                        Submit\n                        </button>\n                \n                </div>\n\n                <div id='charStatus'>\n                    <DisplayCharStatus \n                    statusLists={this.state.statusLists}\n                    indicator={this.state.indicator}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nclass DisplayCharStatus extends React.Component {\n\n    constructor(props){\n        super(props);\n        \n        this.colorMap = {\n            0: 'red',\n            1: 'orange',\n            2: 'green'\n        }\n        this.state = {\n            expandedRows: [],\n            //mergeStatus: 'none';\n            hidden: false\n        };\n\n        this.renderItem = this.renderItem.bind(this);\n        this.handleRowClick = this.handleRowClick.bind(this);\n        this.getAnnRows = this.getAnnRows.bind(this);\n        this.toggleDisplay = this.toggleDisplay.bind(this);\n    }\n\n    handleRowClick(rowId) {\n        const currentExpandedRows = this.state.expandedRows;\n        const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\n\n        const newExpandedRows = isRowCurrentlyExpanded ?\n            currentExpandedRows.filter(id => id !== rowId) :\n            currentExpandedRows.concat(rowId);\n\n        this.setState({expandedRows : newExpandedRows});\n\n\n    }\n\n\n    renderItem(item) {\n        const clickCallback = () => this.handleRowClick(item.id);\n        let cName = 'td-green';\n        if (item.status === 0) {\n            \n            cName = 'td-red';\n        }\n        else if(item.status === 1){\n            cName = 'td-orange';\n        }\n\n        cName = cName + ' row-name';\n        const itemRows = [\n            <tr key={\"row-data-\" + item.id}>\n                {/* <td className={'td-normal'}>{icon}</td> */}\n                <td onClick={clickCallback} className={cName}>{item.name}</td>\n                {/* <td className={'td-left'}>{deleteIcon}</td> */}\n            </tr>\n        ];\n\n        if (this.state.expandedRows.includes(item.id)) {\n            itemRows.push(\n                <tr>\n                    <td><b>Aliases</b></td>\n                </tr>\n            );\n            item.expand.forEach((el) => {\n                itemRows.push(\n                    <SubTable\n                        item={item}\n                        alias={el}\n                    />\n                );\n            });\n            }\n\n        return itemRows;\n    }\n\n    getAnnRows() {\n        let self = this;\n        let statusList = this.props.statusLists;\n        let ann_names = Object.keys(statusList);\n\n        let ann_rows = {}\n\n        // console.log(ann_names);\n        // console.log(statusList);\n\n        ann_names.forEach( function(ann_name, index) {\n            let allItemRows = [];\n\n            statusList[ann_name].forEach(item => {\n                const perItemRows = self.renderItem(item);\n                allItemRows = allItemRows.concat(perItemRows);\n            });\n            ann_rows[ann_name] = allItemRows\n        })\n\n        return {\n            'annRows': ann_rows,\n            'annNames': ann_names\n        }\n\n    }\n\n    toggleDisplay(event) {\n        this.setState({\n            hidden: !this.state.hidden\n        })\n    }\n\n    render() {\n        \n        //if empty statusLists\n        if (this.props.statusLists === '') {\n            return (\n                <div>\n\n        </div>\n            )\n        }\n\n        else if (this.props.indicator === 1) {\n            return (\n                <div>\n                    <h4 style={{color: 'darkgreen'}}>\n                        All names match!\n                    </h4>\n                </div>\n            )\n        }\n\n        else {\n            let res = this.getAnnRows()\n            let ann_rows = res['annRows'];\n            let ann_names = res['annNames'];\n\n            let divClassName=\"charTables\";\n            if (this.state.hidden===true){\n                divClassName = divClassName + \" hidden\";\n            }\n          \n            let buttonText = \"minimize\";\n            if (this.state.hidden === true) {\n                buttonText = \"show\";\n            }\n            \n            return (\n                <div>\n                    <div id='minimize-button'>\n                        <button type=\"button\" onClick={this.toggleDisplay}>\n                            {buttonText}\n\n                        </button>\n\n                    </div>\n                    <div>\n                            <p style={{'background': 'white', 'border':'none'}}>\n                            <span style={{'color': 'darkred'}}>Red: Main name Mismatch&nbsp;&nbsp;</span><span style={{'color': 'orange'}}>Orange: Alias Mismatch&nbsp;&nbsp;</span>\n                            <span style={{'color': 'green'}}>Green: All good!&nbsp;&nbsp;</span>\n                            </p>\n                        </div>\n                    <div className={divClassName}>\n                        \n                    <div >\n                        <div><h4 style={{'color': 'purple', 'height': '20px'}}>{ann_names[0]}</h4></div>\n                        <div  className='char-table'>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <td>\n                                        ---\n                                    </td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {ann_rows[ann_names[0]]}\n                            </tbody>\n                        </table>\n                        </div>\n                </div>\n                    <div>\n                        <div><h4 style={{'color': 'purple', 'height': '20px'}}>{ann_names[1]}</h4></div>\n                        <div className='char-table'>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <td>\n                                        ---\n                                    </td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {ann_rows[ann_names[1]]}\n                            </tbody>\n                        </table>     \n                    </div>\n                </div>\n                </div>\n                </div>\n            )\n        }     \n    }\n\n}\n\nclass SubTable extends React.Component {\n\n\n    render() {\n        //console.log(this.props.item.expand);\n        const el = this.props.alias;\n        return (\n            <tr key={el.name}>\n                <td className={'td-alias'}>\n                    {el.name}\n                </td>\n            </tr>\n        )\n    }\n}\n\nclass GenDis extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            file_1: '',\n            file_2: '',\n            message: ''\n        }\n\n        this.handleUpload = this.handleUpload.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.saveAsFile = this.saveAsFile.bind(this);\n    }\n\n    handleUpload(event) {\n\n        let button_id = event.target.name;\n        let data = {}\n        \n\n        for (let i=0; i< event.target.files.length; i=i+1) {\n            let file = event.target.files[i];\n            let filename = event.target.files[i].name;\n            let reader = new FileReader();\n\n            if (filename[0] !== '.') {\n                reader.readAsText(file, 'UTF-8');\n                reader.onload = function(e) {\n                    data[filename] = e.target.result;\n                }\n              \n            }\n        }\n\n        if (button_id === 'file1') {\n            \n            let msg = 'Annotations received for ' + this.props.name_1;\n            msg = this.state.message + '\\n' + msg\n            this.setState({file_1:data, message: msg})\n        }\n        else if (button_id === 'file2') {\n\n            let msg = 'Annotations received for ' + this.props.name_2;\n            msg = this.state.message + '\\n' + msg\n            this.setState({file_2:data, message: msg})\n        }\n    }\n\n    saveAsFile(text, filename) {\n        // Step 1: Create the blob object with the text you received\n        const type = 'application/text'; // modify or get it from response\n        const blob = new Blob([text], {type});\n      \n        // Step 2: Create Blob Object URL for that blob\n        const url = URL.createObjectURL(blob);\n      \n        // Step 3: Trigger downloading the object using that URL\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        a.click(); // triggering it manually\n      }\n\n    handleSubmit(event) { \n\n        if (this.state.file_1 === '' || this.state.file_2==='') {\n            //alert(\"File(s) missing. \")\n            let msg = 'ERROR: Missing data.'\n            msg = this.state.message + '\\n' + msg;\n            this.setState({message: {msg}})\n        }\n\n        else {\n            let ann_names = [this.props.name_1, this.props.name_2]\n            let data = {\n                [ann_names[0]]: this.state.file_1,\n                [ann_names[1]]: this.state.file_2\n            }\n            let msg = 'Processing...'\n            msg = this.state.message + '\\n' + msg;\n            this.setState({message: msg})\n            //send to server\n            //alert(\"Generating Disagreements.\")\n            //check character agreements\n            axios.post('http://127.0.0.1:8080/getDisDoc', \n               data,\n                ).then(res => {\n                    //console.log(res.data.statusLists);\n                    //return res.data.statusLists;\n                    // let text = res.data.content;\n                    // let title = res.data.title;\n                    // this.saveAsFile(text, title+'.txt');\n                    let content = res.data.content;\n                    let title = res.data.title;\n                    this.saveAsFile(content, title+'.txt');\n                    let msg = 'Processing Complete!';\n                    msg = this.state.message + '\\n' + msg;\n                    this.setState({message: msg})\n                })\n        }\n    }\n\n    render() {\n\n        let msg = this.state.message;\n\n        return (\n            <div id='zipUpload'>\n\n                <LoadFolderButton \n                name='file1'\n                handleUpload={this.handleUpload}\n                msg={\"Folder 1: \" + this.props.name_1}\n                />\n             \n               \n                <LoadFolderButton \n                name='file2'\n                handleUpload={this.handleUpload}\n                msg={\"Folder 2: \" + this.props.name_2}\n                />\n\n                <button type='button' onClick={this.handleSubmit}>\n                    Submit\n                    </button>\n\n                <div id='foot-msg'>\n                {msg.split(\"\\n\").map((i,key) => {\n            return <div key={key}>{i}</div>;\n        })}\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\nexport default Analyze;","import React from 'react';\nimport {Switch, Route, Link} from 'react-router-dom';\nimport Tool from './annotate';\nimport Analyze from './analyze';\nimport './main.css'\n\n\nclass App extends React.Component { \n    render() {\n        return (\n            <div>\n                <div id='main-navbar'>\n                    {/* <h1>Main Navigation Bar</h1> */}\n                    <span className='nav-el'>\n                        <Link to='/'>Home</Link>\n                    </span>\n                    <span className='nav-el'>\n                        <Link to='/annotate'>Annotate</Link>\n                    </span>\n                    <span className='nav-el'>\n                        <Link to='/analyze'>Analyze</Link>\n                    </span>\n                    <span className='nav-el'>\n                    <a href={\"https://docs.google.com/document/d/1eBsX2rjdLBkmA-kWB_jHCxC1nmbzinH04WUg9PeN_2A/edit?usp=sharing\"} target=\"_blank\">Instructions</a>\n                    </span>\n                </div>\n\n\n                <div className='home'>\n                    <Switch>\n                        <Route exact path='/' component={Home}/>\n                        <Route exact path='/annotate' component={Tool}/>\n                        <Route exact path='/analyze' component={Analyze}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Home extends React.Component {\n    render () {\n        return (\n            <div id='home-content'>\n                <h1>Annotation Tool</h1>\n                <p className='normal-p'>\n                    Welcome! You can go from here to the main annotation page, or analyze previous annotations. \n                <br />\n                    These options are also available on the top navigation bar at all times. \n                </p>\n\n                <div className='main-options'>\n                <span className='main-option'>\n                   <Link to='/annotate'>Annotate</Link>\n                </span>\n                <span className='main-option'>\n                    <Link to='/analyze'>Analyze Disagreements</Link>\n                </span>\n                </div>\n\n            </div>\n        )\n    }\n} \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport Home from './route';\n\n\nReactDOM.render(\n    <BrowserRouter>\n      <Home/>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}